version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: perfume_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: perfume_samples
      POSTGRES_USER: perfume_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - perfume_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U perfume_user -d perfume_samples"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: perfume_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - perfume_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application (Production)
  app:
    build:
      context: ../src
      dockerfile: Dockerfile
    container_name: perfume_app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://perfume_user:${DB_PASSWORD:-your_secure_password_here}@postgres:5432/perfume_samples
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - EMAIL_SERVER_HOST=${EMAIL_SERVER_HOST}
      - EMAIL_SERVER_PORT=${EMAIL_SERVER_PORT:-587}
      - EMAIL_SERVER_USER=${EMAIL_SERVER_USER}
      - EMAIL_SERVER_PASSWORD=${EMAIL_SERVER_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - perfume_network
    volumes:
      - app_uploads:/app/public/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: perfume_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - perfume_network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: perfume_certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot-webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    profiles:
      - ssl-setup

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: perfume_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-your_secure_password_here}
    volumes:
      - ./backups:/backups
      - backup_scripts:/scripts
    depends_on:
      - postgres
    networks:
      - perfume_network
    entrypoint: |
      sh -c '
      echo "#!/bin/sh" > /scripts/backup.sh
      echo "pg_dump -h postgres -U perfume_user -d perfume_samples > /backups/backup_\$$(date +%Y%m%d_%H%M%S).sql" >> /scripts/backup.sh
      echo "find /backups -name \"backup_*.sql\" -mtime +7 -delete" >> /scripts/backup.sh
      chmod +x /scripts/backup.sh
      while true; do
        /scripts/backup.sh
        sleep 86400  # Run daily
      done
      '
    profiles:
      - backup

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4
    container_name: perfume_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@perfume-samples.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - perfume_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  app_uploads:
    driver: local
  backup_scripts:
    driver: local

networks:
  perfume_network:
    driver: bridge